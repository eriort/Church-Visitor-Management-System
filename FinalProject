import tkinter
from tkinter import ttk, messagebox
from tkcalendar import Calendar
import matplotlib.pyplot as plt


class Church:
    def __init__(self):
        self.visitors = []
        self.programs = ["Aventurer Club", "Pathfinder Club", "Bible Study", "Baptist"]
        self.services = {"Food", "Clothing", "Housing"}


def add_visitor_to_church(church, name, age, contact, nationality, interests, visit_date, services):
    visitor = {
        "name": name,
        "age": age,
        "contact": contact,
        "nationality": nationality,
        "interests": interests,
        "visit_date": visit_date,
        "services": services
    }
    church.visitors.append(visitor)


def show_graph(church):
    interests_count = {}
    for visitor in church.visitors:
        for interest in visitor['interests']:
            if interest in interests_count:
                interests_count[interest] += 1
            else:
                interests_count[interest] = 1

    programs = list(interests_count.keys())
    counts = list(interests_count.values())

    plt.figure(figsize=(10, 6))
    plt.bar(programs, counts, color='skyblue')
    plt.xlabel('Programs')
    plt.ylabel('Number of Visitors Interested')
    plt.title('Visitor Interests in Church Programs')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


church = Church()

# Main window
window = tkinter.Tk()
window.title('Church Visitor Management')

frame = tkinter.Frame(window)
frame.pack()

# Visitor Registration Frame
visitor_frame = tkinter.LabelFrame(frame, text='New Visitor Registration')
visitor_frame.grid(row=0, column=0, padx=10, pady=10)

# Full Name
tkinter.Label(visitor_frame, text='Full Name').grid(row=0, column=0, padx=5, pady=5)
fullname_entry = tkinter.Entry(visitor_frame)
fullname_entry.grid(row=0, column=1, padx=5, pady=5)

# Age
tkinter.Label(visitor_frame, text='Age').grid(row=0, column=2, padx=5, pady=5)
agespinbox = tkinter.Spinbox(visitor_frame, from_=16, to=50)
agespinbox.grid(row=0, column=3, padx=5, pady=5)

# Contact Number
tkinter.Label(visitor_frame, text='Contact Number').grid(row=1, column=0, padx=5, pady=5)
contact_entry = tkinter.Entry(visitor_frame)
contact_entry.grid(row=1, column=1, padx=5, pady=5)

# Nationality
countries = ['AFGHANISTAN', 'ALBANIA', 'ALGERIA', 'AMERICAN SAMOA', 'ANDORRA', 'ANGOLA', 'ANGUILLA', 'ANTARCTICA',
             'ANTIGUA AND BARBUDA', 'ARGENTINA', 'ARMENIA', 'ARUBA', 'AUSTRALIA', 'AUSTRIA', 'AZERBAIJAN', 'BAHAMAS',
             'BAHRAIN', 'BANGLADESH', 'BARBADOS', 'BELARUS', 'BELGIUM', 'BELIZE', 'BENIN', 'BERMUDA', 'BHUTAN',
             'BOLIVIA', 'BOSNIA AND HERZEGOVINA', 'BOTSWANA', 'BOUVET ISLAND', 'BRAZIL',
             'BRITISH INDIAN OCEAN TERRITORY', 'BRUNEI DARUSSALAM', 'BULGARIA', 'BURKINA FASO', 'BURUNDI', 'CAMBODIA',
             'CAMEROON', 'CANADA', 'CAPE VERDE', 'CAYMAN ISLANDS', 'CENTRAL AFRICAN REPUBLIC', 'CHAD', 'CHILE', 'CHINA',
             'CHRISTMAS ISLAND', 'COCOS (KEELING) ISLANDS', 'COLOMBIA', 'COMOROS', 'CONGO',
             'CONGO, THE DEMOCRATIC REPUBLIC OF', 'COOK ISLANDS', 'COSTA RICA', "CÔTE D'IVOIRE", 'CROATIA', 'CUBA',
             'CYPRUS', 'CZECH REPUBLIC', 'DENMARK', 'DJIBOUTI', 'DOMINICA', 'DOMINICAN REPUBLIC', 'ECUADOR', 'EGYPT',
             'EL SALVADOR', 'EQUATORIAL GUINEA', 'ERITREA', 'ESTONIA', 'ETHIOPIA', 'FALKLAND ISLANDS (MALVINAS)',
             'FAROE ISLANDS', 'FIJI', 'FINLAND', 'FRANCE', 'FRENCH GUIANA', 'FRENCH POLYNESIA',
             'FRENCH SOUTHERN TERRITORIES', 'GABON', 'GAMBIA', 'GEORGIA', 'GERMANY', 'GHANA', 'GIBRALTAR', 'GREECE',
             'GREENLAND', 'GRENADA', 'GUADELOUPE', 'GUAM', 'GUATEMALA', 'GUINEA', 'GUINEA', 'GUYANA', 'HAITI',
             'HEARD ISLAND AND MCDONALD ISLANDS', 'HONDURAS', 'HONG KONG', 'HUNGARY', 'ICELAND', 'INDIA', 'INDONESIA',
             'IRAN, ISLAMIC REPUBLIC OF', 'IRAQ', 'IRELAND', 'ISRAEL', 'ITALY', 'JAMAICA', 'JAPAN', 'JORDAN',
             'KAZAKHSTAN', 'KENYA', 'KIRIBATI', "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF", 'KOREA, REPUBLIC OF',
             'KUWAIT', 'KYRGYZSTAN', "LAO PEOPLE'S DEMOCRATIC REPUBLIC", 'LATVIA', 'LEBANON', 'LESOTHO', 'LIBERIA',
             'LIBYAN ARAB JAMAHIRIYA', 'LIECHTENSTEIN', 'LITHUANIA', 'LUXEMBOURG', 'MACAO',
             'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF', 'MADAGASCAR', 'MALAWI', 'MALAYSIA', 'MALDIVES', 'MALI',
             'MALTA', 'MARSHALL ISLANDS', 'MARTINIQUE', 'MAURITANIA', 'MAURITIUS', 'MAYOTTE', 'MEXICO',
             'MICRONESIA, FEDERATED STATES OF', 'MOLDOVA, REPUBLIC OF', 'MONACO', 'MONGOLIA', 'MONTSERRAT', 'MOROCCO',
             'MOZAMBIQUE', 'MYANMAR', 'NAMIBIA', 'NAURU', 'NEPAL', 'NETHERLANDS', 'NETHERLANDS ANTILLES',
             'NEW CALEDONIA', 'NEW ZEALAND', 'NICARAGUA', 'NIGER', 'NIGERIA', 'NIUE', 'NORFOLK ISLAND',
             'NORTHERN MARIANA ISLANDS', 'NORWAY', 'OMAN', 'PAKISTAN', 'PALAU', 'PALESTINIAN TERRITORY, OCCUPIED',
             'PANAMA', 'PAPUA NEW GUINEA', 'PARAGUAY', 'PERU', 'PHILIPPINES', 'PITCAIRN', 'POLAND', 'PORTUGAL',
             'PUERTO RICO', 'QATAR', 'RÉUNION', 'ROMANIA', 'RUSSIAN FEDERATION', 'RWANDA', 'SAINT HELENA',
             'SAINT KITTS AND NEVIS', 'SAINT LUCIA', 'SAINT PIERRE AND MIQUELON', 'SAINT VINCENT AND THE GRENADINES',
             'SAMOA', 'SAN MARINO', 'SAO TOME AND PRINCIPE', 'SAUDI ARABIA', 'SENEGAL', 'SERBIA AND MONTENEGRO',
             'SEYCHELLES', 'SIERRA LEONE', 'SINGAPORE', 'SLOVAKIA', 'SLOVENIA', 'SOLOMON ISLANDS', 'SOMALIA',
             'SOUTH AFRICA', 'SOUTH GEORGIA AND SOUTH SANDWICH ISLANDS', 'SPAIN', 'SRI LANKA', 'SUDAN', 'SURINAME',
             'SVALBARD AND JAN MAYEN', 'SWAZILAND', 'SWEDEN', 'SWITZERLAND', 'SYRIAN ARAB REPUBLIC',
             'TAIWAN, PROVINCE OF CHINA', 'TAJIKISTAN', 'TANZANIA, UNITED REPUBLIC OF', 'THAILAND', 'TIMOR', 'TOGO',
             'TOKELAU', 'TONGA', 'TRINIDAD AND TOBAGO', 'TUNISIA', 'TURKEY', 'TURKMENISTAN', 'TURKS AND CAICOS ISLANDS',
             'TUVALU', 'UGANDA', 'UKRAINE', 'UNITED ARAB EMIRATES', 'UNITED KINGDOM', 'UNITED STATES',
             'UNITED STATES MINOR OUTLYING ISLANDS', 'URUGUAY', 'UZBEKISTAN', 'VANUATU', 'VENEZUELA', 'VIET NAM',
             'VIRGIN ISLANDS, BRITISH', 'VIRGIN ISLANDS, U.S.', 'WALLIS AND FUTUNA', 'WESTERN SAHARA', 'YEMEN',
             'ZIMBABWE']
tkinter.Label(visitor_frame, text='Nationality').grid(row=1, column=2, padx=5, pady=5)
nationalitycombo = ttk.Combobox(visitor_frame, values=countries)
nationalitycombo.grid(row=1, column=3, padx=5, pady=5)

# Programs of Interest
program_frame = tkinter.LabelFrame(frame, text='Programs of Interest')
program_frame.grid(row=2, column=0, padx=5, pady=5)

program_vars = {}
for program in church.programs:
    program_vars[program] = tkinter.BooleanVar()
    tkinter.Checkbutton(program_frame, text=program, variable=program_vars[program]).pack(anchor='w')

# Community Help Services
services_frame = tkinter.LabelFrame(frame, text='Community Help Services')
services_frame.grid(row=3, column=0, padx=5, pady=5)

service_vars = {}
for service in church.services:
    service_vars[service] = tkinter.BooleanVar()
    tkinter.Checkbutton(services_frame, text=service, variable=service_vars[service]).pack(anchor='w')

# Calendar for Visit Date
visit_date_frame = tkinter.LabelFrame(frame, text='Schedule a visit')
visit_date_frame.grid(row=4, column=0, padx=5, pady=5)
cal = Calendar(visit_date_frame, selectmode='day')
cal.pack(padx=5, pady=5)


# Save Button
def on_save():
    name = fullname_entry.get()
    age = agespinbox.get()
    contact = contact_entry.get()
    nationality = nationalitycombo.get()
    interests = [program for program, var in program_vars.items() if var.get()]
    visit_date = cal.get_date()
    services = [service for service, var in service_vars.items() if var.get()]

    if name and age and contact and nationality and interests and visit_date and services:
        add_visitor_to_church(church, name, age, contact, nationality, interests, visit_date, services)
        fullname_entry.delete(0, tkinter.END)
        agespinbox.delete(0, tkinter.END)
        contact_entry.delete(0, tkinter.END)
        nationalitycombo.set('')
        for var in program_vars.values():
            var.set(False)
        for var in service_vars.values():
            var.set(False)

        with open('visitors.txt', 'a') as fwrite:
            fwrite.write(
                f"{name} {age} {contact} {nationality} {','.join(interests)} {visit_date} {','.join(services)}\n")
    else:
        messagebox.showwarning("Input Error",
                               "Please fill out all fields and select at least one program and one service.")


save_btn = tkinter.Button(visitor_frame, text='Save', command=on_save)
save_btn.grid(row=5, column=0, columnspan=2, pady=10)

# Show Graph Button
show_graph_btn = tkinter.Button(window, text='Show Graph', command=lambda: show_graph(church))
show_graph_btn.pack(pady=10)

window.mainloop()
